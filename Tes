#!/bin/bash
# ========== 初期化 ==========
while [ $# -gt 0 ]; do
    case $1 in
        "-region")
            shift
            region=$1
            shift;;
        "-rds")
            shift 
            rds_id=$1
            shift;;
        "-out")
            shift
            outputfile=$1
            shift;;
        "-file")
            shift
            logfilename=$1
            shift;;
        *)
            echo "Usage: $(basename $0) -region AWS_REGION -rds RDS_IDENTIFIER -file FILENAME_PATTERN_TO_BE_DOWNLOADED -out OUTPUT_FILE" >&2
            exit 1;;
    esac
done

# 默认值
rds_id=${rds_id:=test123}
logfilename=${logfilename:=error/mysql-error.log}
outputfile=${outputfile:=$(pwd)/mysql-general.log}
region=${region:=ap-northeast-1}

# 常量
service="rds"
host="rds.${region}.amazonaws.com"
endpoint="https://${host}"
ALGORITHM="AWS4-HMAC-SHA256"

# ========== 函数 ==========

# URL编码函数
function urlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos c o

    for (( pos=0 ; pos<strlen ; pos++ )); do
        c=${string:$pos:1}
        case "$c" in
            [-_.~a-zA-Z0-9] ) o="${c}" ;;
            * )               printf -v o '%%%02X' "'$c"
        esac
        encoded+="${o}"
    done
    echo "${encoded}"
}

# 获取IAM角色凭证
function getIamRoleCredentials() {
    local metadata_url="http://169.254.169.254/latest/meta-data/iam/security-credentials/"
    local iam_role_name=$(curl -s ${metadata_url})
    local credentials=$(curl -s ${metadata_url}${iam_role_name})

    access_key=$(echo "$credentials" | awk -F'"' '/AccessKeyId/ {print $4}')
    secret_key=$(echo "$credentials" | awk -F'"' '/SecretAccessKey/ {print $4}')
    token=$(echo "$credentials" | awk -F'"' '/Token/ {print $4}')
}

# 签名函数（修改后的）
function sign() {
    local key=$1
    local data=$2
    echo -n "$data" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$key" | sed 's/^.* //'
}

# 获取签名密钥（修改后的）
function getSignatureKey() {
    local secret=$1
    local date=$2
    local region=$3
    local service=$4

    # 将密钥转换为十六进制
    local kSecret=$(echo -n "AWS4${secret}" | xxd -p -c 256)

    local kDate=$(sign "$kSecret" "$date")
    local kRegion=$(sign "$kDate" "$region")
    local kService=$(sign "$kRegion" "$service")
    local kSigning=$(sign "$kService" "aws4_request")
    echo "$kSigning"
}

# 下载RDS日志
function downloadRDSLog() {
    local logfilename=$1
    local encoded_logfilename=$(urlencode "${logfilename}")
    local encoded_rds_id=$(urlencode "${rds_id}")
    local request_path="/v13/downloadCompleteLogFile/${encoded_rds_id}/${encoded_logfilename}"
    local payload_hash=$(echo -n "" | openssl dgst -sha256 | awk '{print $2}')

    # 更新日期
    local amzdate=$(date -u +%Y%m%dT%H%M%SZ)
    local datadate=$(date -u +%Y%m%d)
    local scope="${datadate}/${region}/${service}/aws4_request"

    # 创建规范请求
    local canonical_request="GET\n${request_path}\n\nhost:${host}\nx-amz-date:${amzdate}\nx-amz-security-token:${token}\n\nhost;x-amz-date;x-amz-security-token\n${payload_hash}"

    echo "Canonical Request: $canonical_request" # 调试

    # 创建待签名字符串
    local string_to_sign="${ALGORITHM}\n${amzdate}\n${scope}\n$(echo -n "$canonical_request" | openssl dgst -sha256 | awk '{print $2}')"

    echo "String to Sign: $string_to_sign" # 调试

    # 计算签名
    local signing_key=$(getSignatureKey "$secret_key" "$datadate" "$region" "$service")
    local signature=$(echo -n "$string_to_sign" | openssl dgst -sha256 -mac HMAC -macopt hexkey:"$signing_key" | sed 's/^.* //')

    echo "Signature: $signature" # 调试

    # 创建授权头
    local authorization_header="${ALGORITHM} Credential=${access_key}/${scope}, SignedHeaders=host;x-amz-date;x-amz-security-token, Signature=${signature}"

    # 发送请求
    curl -s \
        -H "host: ${host}" \
        -H "x-amz-date: ${amzdate}" \
        -H "x-amz-security-token: ${token}" \
        -H "Authorization: ${authorization_header}" \
        "${endpoint}${request_path}" >> $outputfile

    if [ $? -ne 0 ]; then
        echo "下载错误" >&2
        exit 1
    fi
}

# ========== 主程序 ==========
# 获取IAM角色凭证
getIamRoleCredentials

# 初始化输出文件
> $outputfile
if [ $? -ne 0 ]; then
    echo "文件访问错误 (${outputfile})" >&2
    exit 1
fi

# 获取日志文件列表
logfiles=$(aws rds describe-db-log-files --db-instance-identifier $rds_id --filename-contains $logfilename --query "DescribeDBLogFiles[*].[LogFileName]" --output text --region $region | sort)
if [ $? -ne 0 ]; then
    echo "无法获取日志列表" >&2
    exit 1
fi

# 下载日志
for logfile in $logfiles; do
    echo "正在下载 $logfile"
    downloadRDSLog "$logfile"
done
