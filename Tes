#!/bin/bash
# ========== 初期化 ==========
while [ $# -gt 0 ]; do
    case $1 in
        "-region")
            shift
            region=$1
            shift;;
        "-rds")
            shift 
            rds_id=$1
            shift;;
        "-out")
            shift
            outputfile=$1
            shift;;
        "-file")
            shift
            logfilename=$1
            shift;;
        *)
            echo "Usage: $(basename $0) -region AWS_REGION -rds RDS_IDENTIFIER -file FILENAME_PATTERN_TO_BE_DOWNLOADED -out OUTPUT_FILE" >&2
            exit 1;;
    esac
done

# Assume defaults
rds_id=${rds_id:=test123}
logfilename=${logfilename:=error/mysql-error.log}
outputfile=${outputfile:=$(pwd)/mysql-general.log}
region=${region:=ap-northeast-1}

# Set constants
service="rds"
host="rds.${region}.amazonaws.com"
endpoint="https://${host}"
ALGORITHM="AWS4-HMAC-SHA256"
datadate=$(date -u +%Y%m%d)
amzdate=$(date -u +%Y%m%dT%H%M%SZ)
scope="${datadate}/${region}/${service}/aws4_request"

# ========== 関数 ==========
function getIamRoleCredentials() {
    local metadata_url="http://169.254.169.254/latest/meta-data/iam/security-credentials/"
    local iam_role_name=$(curl -s ${metadata_url})
    local credentials=$(curl -s ${metadata_url}${iam_role_name})
    access_key=$(echo $credentials | grep -oP '(?<="AccessKeyId" : ").*?(?=")')
    secret_key=$(echo $credentials | grep -oP '(?<="SecretAccessKey" : ").*?(?=")')
    token=$(echo $credentials | grep -oP '(?<="Token" : ").*?(?=")')
}

function sign() {
    local key=$1
    local data=$2
    echo -n "$data" | openssl dgst -sha256 -hmac "$key" -binary | base64
}

function getSignatureKey() {
    local secret=$1
    local date=$2
    local region=$3
    local service=$4
    kDate=$(sign "AWS4${secret}" "$date" | tr -d '\0')
    kRegion=$(sign "$kDate" "$region" | tr -d '\0')
    kService=$(sign "$kRegion" "$service" | tr -d '\0')
    kSigning=$(sign "$kService" "aws4_request" | tr -d '\0')
    echo $kSigning
}

function downloadRDSLog() {
    local logfilename=$1
    local request_path="/v13/downloadCompleteLogFile/${rds_id}/${logfilename}"
    local payload_hash=$(echo -n "" | openssl dgst -sha256 | awk '{print $2}')

    # Create canonical request
    local canonical_request="GET\n${request_path}\n\nhost:${host}\nx-amz-date:${amzdate}\nx-amz-security-token:${token}\n\nhost;x-amz-date;x-amz-security-token\n${payload_hash}"

    # Create string to sign
    local string_to_sign="${ALGORITHM}\n${amzdate}\n${scope}\n$(echo -n "$canonical_request" | openssl dgst -sha256 | awk 'NF>1{print $NF}')"

    # Calculate the signature
    local signing_key=$(getSignatureKey "$secret_key" "$datadate" "$region" "$service")
    local signature=$(echo -n "$string_to_sign" | openssl dgst -sha256 -mac HMAC -macopt key:$signing_key | awk '{print $2}')

    # Create authorization header
    local authorization_header="${ALGORITHM} Credential=${access_key}/${scope}, SignedHeaders=host;x-amz-date;x-amz-security-token, Signature=${signature}"

    # Make the request
    curl -s \
        -H "host: ${host}" \
        -H "x-amz-date: ${amzdate}" \
        -H "x-amz-security-token: ${token}" \
        -H "Authorization: ${authorization_header}" \
        "${endpoint}${request_path}" >> $outputfile

    if [ $? -ne 0 ]; then
        echo "Download error" >&2
        exit 1
    fi
}

# ========== 主処理 ==========
# Get IAM role credentials
getIamRoleCredentials

# Initialize output file
> $outputfile
if [ $? -ne 0 ]; then
    echo "File access error (${outputfile})" >&2
    exit 1
fi

# Get list of log files
logfiles=$(aws rds describe-db-log-files --db-instance-identifier $rds_id --filename-contains $logfilename --query "DescribeDBLogFiles[*].[LogFileName]" --output text | sort)
if [ $? -ne 0 ]; then
    echo "Log list not available" >&2
    exit 1
fi

# Download logs
for logfile in $logfiles; do
    echo "Downloading $logfile"
    downloadRDSLog $logfile
done






